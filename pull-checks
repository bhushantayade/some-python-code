CREATE OR REPLACE VIEW `your_project.your_dataset.pending_files_view` AS
WITH latest_status AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY file_id ORDER BY timestamp_column DESC) AS rn
    FROM `your_project.your_dataset.file_process`
)
SELECT *
FROM latest_status
WHERE rn = 1 AND status = 'pending';



import threading

# settings.py
_thread_local = threading.local()

def get_shared_variable():
    return getattr(_thread_local, "shared_variable", "default_value")

def set_shared_variable(value):
    _thread_local.shared_variable = value


import settings

def entry_point(request):
    settings.set_shared_variable("request_specific_value")
    print(f"Shared Variable: {settings.get_shared_variable()}")
    return "Done"
#####

errors = client.insert_rows_json(table_ref, rows_to_insert)
    if errors:
        print(f"Encountered errors while inserting rows: {errors}")
    else:
        print("Rows successfully inserted into BigQuery table.")



from datetime import datetime, timedelta

# Generate date range
def generate_date_series(start_date, end_date):
    current_date = start_date
    while current_date <= end_date:
        yield current_date
        current_date += timedelta(days=1)

# Generate hour range
def generate_hour_series():
    return list(range(0, 24))

# Generate 10-minute intervals
def generate_minute_series():
    return list(range(0, 60, 10))

# Function to generate expanded file names
def generate_expanded_file_names(master_table, start_date, end_date):
    date_series = list(generate_date_series(start_date, end_date))
    hour_series = generate_hour_series()
    minute_series = generate_minute_series()

    expanded_file_names = []

    for row in master_table:
        file_name = row['file_name']
        file_name_pattern = row.get('file_name_pattern', '')

        for date in date_series:
            if file_name == 'file1':
                expanded_file_name = f"{file_name}_{date.strftime('%Y%m%d')}"
                expanded_file_names.append({
                    'file_name': file_name,
                    'file_name_pattern': file_name_pattern,
                    'expanded_file_name': expanded_file_name
                })

            elif file_name == 'file2':
                for hour in hour_series:
                    expanded_file_name = f"{file_name}_{date.strftime('%Y%m%d')}_{hour:02d}"
                    expanded_file_names.append({
                        'file_name': file_name,
                        'file_name_pattern': file_name_pattern,
                        'expanded_file_name': expanded_file_name
                    })

            elif file_name == 'file3':
                for hour in hour_series:
                    for minute in minute_series:
                        expanded_file_name = f"{file_name}_{date.strftime('%Y%m%d')}_{hour:02d}_{minute:02d}"
                        expanded_file_names.append({
                            'file_name': file_name,
                            'file_name_pattern': file_name_pattern,
                            'expanded_file_name': expanded_file_name
                        })

    return expanded_file_names


# Example master_table data
master_table = [
    {'file_name': 'file1', 'file_name_pattern': 'daily'},
    {'file_name': 'file2', 'file_name_pattern': 'hourly'},
    {'file_name': 'file3', 'file_name_pattern': 'every_10_minutes'}
]

# Generate expanded file names
start_date = datetime.now().date()
end_date = start_date + timedelta(days=30)

result = generate_expanded_file_names(master_table, start_date, end_date)

# Print results
for entry in result[:10]:  # Print only the first 10 results for brevity
    print(entry)


####
from google.cloud import secretmanager

def access_secret_version(project_id, secret_id, version_id="latest"):
    """
    Access a specific version of a secret from GCP Secret Manager.

    :param project_id: GCP project ID
    :param secret_id: Name of the secret
    :param version_id: Version of the secret (default is "latest")
    :return: Secret payload as a string
    """
    # Create the Secret Manager client
    client = secretmanager.SecretManagerServiceClient()

    # Build the resource name of the secret version
    name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"

    # Access the secret version
    response = client.access_secret_version(request={"name": name})

    # Return the secret payload
    return response.payload.data.decode("UTF-8")


# Example usage
if __name__ == "__main__":
    # Replace these with your GCP project details
    PROJECT_ID = "your-gcp-project-id"
    SECRET_ID = "your-secret-id"

    # Fetch secret
    try:
        secret_value = access_secret_version(PROJECT_ID, SECRET_ID)
        print(f"Secret Value: {secret_value}")
    except Exception as e:
        print(f"Failed to access secret: {e}")
#####

from google.cloud import secretmanager

def fetch_secrets_by_label(project_id, label_key, label_value, version_id="latest"):
    """
    Fetch secrets that match a specific label and access their values.
    
    :param project_id: GCP project ID
    :param label_key: Label key to filter secrets
    :param label_value: Label value to filter secrets
    :param version_id: Version of the secret (default is "latest")
    :return: A dictionary of secret names and their corresponding values
    """
    client = secretmanager.SecretManagerServiceClient()

    # List secrets in the project
    parent = f"projects/{project_id}"
    secrets = client.list_secrets(request={"parent": parent})

    matching_secrets = {}

    for secret in secrets:
        # Check if the secret has the matching label
        labels = secret.labels
        if labels and labels.get(label_key) == label_value:
            secret_id = secret.name.split("/")[-1]  # Extract secret ID
            # Access the secret value
            secret_name = f"{secret.name}/versions/{version_id}"
            response = client.access_secret_version(request={"name": secret_name})
            secret_value = response.payload.data.decode("UTF-8")
            matching_secrets[secret_id] = secret_value

    return matching_secrets


# Example usage
if __name__ == "__main__":
    # Replace with your GCP project details
    PROJECT_ID = "your-gcp-project-id"
    LABEL_KEY = "env"  # Example label key
    LABEL_VALUE = "prod"  # Example label value

    try:
        secrets = fetch_secrets_by_label(PROJECT_ID, LABEL_KEY, LABEL_VALUE)
        for secret_id, secret_value in secrets.items():
            print(f"Secret ID: {secret_id}, Value: {secret_value}")
    except Exception as e:
        print(f"Failed to fetch secrets: {e}")

