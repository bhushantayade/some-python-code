import re

def get_base_name(filename):
    """
    Robust financial filename parser that correctly handles:
    - Standard prefix patterns (INST_REPORT_YYYYMMDD)
    - Date-first patterns (YYYYMMDD_INST_REPORT)
    - Mixed delimiters (._-)
    - Version tags (_v2, .v3)
    - No-delimiter fallback (INSTYYYYMMDD)
    """
    # Preprocess filename (normalize delimiters and remove spaces)
    normalized = re.sub(r'[ .-]', '_', filename.strip())
    
    # Ordered patterns (most specific to most general)
    patterns = [
        # 1. Standard prefix before date (INST_REPORT_YYYYMMDD)
        r'^([a-zA-Z0-9_]+(?:_[a-zA-Z0-9]+)*)_\d{8}(?:_\d+)?(?:\..+)?$',
        
        # 2. Dot-delimited prefix (INST.REPORT.YYYYMMDD)
        r'^([a-zA-Z0-9_]+(?:\.[a-zA-Z0-9]+)*)\.\d{8}(?:\.\d+)?(?:\..+)?$',
        
        # 3. Date-first patterns (YYYYMMDD_INST_REPORT)
        r'^\d{8}_([a-zA-Z0-9_]+(?:_[a-zA-Z0-9]+)*)(?:_v\d+)?(?:\..+)?$',
        
        # 4. No-delimiter patterns (INSTYYYYMMDD)
        r'^([a-zA-Z]+)\d{8}(?:\..+)?$',
        
        # 5. Versioned files (INST_REPORT_v2_YYYYMMDD)
        r'^([a-zA-Z0-9_]+(?:_[a-zA-Z0-9]+)*)(?:_v\d+)?_\d{8}(?:\..+)?$'
    ]
    
    for pattern in patterns:
        match = re.match(pattern, normalized)
        if match:
            base = match.group(1)
            # Clean up any residual delimiters
            base = re.sub(r'_{2,}', '_', base).rstrip('_')
            return base.replace('.', '_')  # Standardize to underscores
    
    # Final fallback - take everything before first dot
    return normalized.split('.')[0]

#####
def get_base_name(filename):
    """
    Final robust version handling:
    - All standard financial patterns
    - Date-first and date-last formats
    - Mixed delimiters (._)
    - Version tags
    - No-delimiter fallback
    """
    patterns = [
        r'^([a-zA-Z0-9_.]+?)[._]\d{8}(?:[._]\d+)?(?:\..+)?$',  # Standard prefix
        r'^\d{8}[._]([a-zA-Z0-9_.]+?)(?:[._]v\d+)?(?:\..+)?$', # Date-first
        r'^([a-zA-Z0-9]+)\d{8}(?:\..+)?$',                     # No-delimiter
        r'^([a-zA-Z0-9_.]+)$'                                   # No pattern match
    ]
    
    for pattern in patterns:
        match = re.match(pattern, filename)
        if match:
            return match.group(1)
    return filename.split('.')[0]  # Ultimate fallback


#####
from google.cloud import bigquery

client = bigquery.Client()

query = """
WITH extracted_files AS (
  SELECT 
    file_name,
    file_size,
    create_ts,
    REGEXP_EXTRACT(file_name, r'^(.*)_\\d+_\\d+$') AS base_name
  FROM `your_project.your_dataset.file_size_table`
  WHERE REGEXP_CONTAINS(file_name, r'^category_distribute_\\d+_\\d+$')
),
latest_files AS (
  SELECT 
    base_name,
    MAX(create_ts) AS latest_create_ts
  FROM extracted_files
  GROUP BY base_name
)
SELECT 
  f.file_name,
  f.file_size,
  f.create_ts,
  f.base_name
FROM extracted_files f
JOIN latest_files l
  ON f.base_name = l.base_name AND f.create_ts = l.latest_create_ts
ORDER BY f.create_ts DESC
"""

query_job = client.query(query)
results = query_job.result()

for row in results:
    print(f"Base: {row.base_name}, File: {row.file_name}, Size: {row.file_size}, Date: {row.create_ts}")

