1. Create a Modularized Structure

Organize your code into modules to keep it clean and maintainable.
Create a separate module for email templates.
2. Define Email Templates

Create a Python module (e.g., email_templates.py) to store your email templates.
python
Copy
# email_templates.py

def get_template(template_name):
    templates = {
        "welcome": {
            "subject": "Welcome to Our Service!",
            "body": "Hello {name},\n\nWelcome to our service. We're excited to have you on board!"
        },
        "reset_password": {
            "subject": "Password Reset Request",
            "body": "Hello {name},\n\nYou requested a password reset. Click the link below to reset your password:\n\n{reset_link}"
        },
        "order_confirmation": {
            "subject": "Order Confirmation",
            "body": "Hello {name},\n\nThank you for your order. Your order details are:\n\n{order_details}"
        }
    }
    return templates.get(template_name, None)
3. Create the Cloud Function

Create the main Cloud Function that will use the email templates.
python
Copy
# main.py

import email_templates

def send_email(request):
    # Parse request data
    request_json = request.get_json()
    template_name = request_json.get('template_name')
    recipient = request_json.get('recipient')
    template_data = request_json.get('template_data', {})

    # Get the email template
    template = email_templates.get_template(template_name)
    if not template:
        return "Template not found", 404

    # Format the email subject and body
    subject = template['subject']
    body = template['body'].format(**template_data)

    # Send the email (you can use any email service here)
    # For example, using Gmail API or SendGrid
    # send_email_via_service(recipient, subject, body)

    return f"Email sent to {recipient} with subject: {subject}", 200
