from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return jsonify({"message": "Welcome to the Flask app on Google Cloud Functions!"})

@app.route('/echo', methods=['POST'])
def echo():
    data = request.get_json()
    return jsonify({"you_sent": data})

@app.route('/status', methods=['GET'])
def status():
    return jsonify({"status": "API is working!"})

# Entry point for Google Cloud Function
def flask_app(request):
    return app(request)

def flask_app(request):
    """
    Adapter for Google Cloud Function.
    Uses Flask's WSGI request/response handling to process the request.
    """
    with app.request_context(request.environ):
        response = app.full_dispatch_request()
        return response


2. Run the app:
functions-framework --target=flask_app --port=8080

3.
5. Test the Deployed API
Use curl to test the deployed API:

Test the Home API:
curl https://REGION-PROJECT_ID.cloudfunctions.net/flask_app
Test the Status API:
curl https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/status
Test the Echo API with POST data:
curl -X POST https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/echo \
    -H "Content-Type: application/json" \
    -d '{"message": "Hello, Cloud Functions!"}'


Alternate Fix: Use werkzeug.serving.run_simple() (Optional for Local Testing)
If you’re testing locally without using functions-framework, ensure you’re running a WSGI-compatible server. Here’s how to adapt for testing locally:

if __name__ == "__main__":
    from werkzeug.serving import run_simple

    run_simple("localhost", 8080, app)

curl http://localhost:8080/
curl http://localhost:8080/status
curl -X POST http://localhost:8080/echo -H "Content-Type: application/json" -d '{"key": "value"}'

##########

1. Using httpie
httpie is a user-friendly CLI tool for making HTTP requests. It provides a simpler syntax and formatted output compared to curl.

Install httpie:

pip install httpie
Test the Function:

http https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/
For POST Requests:

http POST https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/echo key=value
2. Using wget
wget is another command-line utility for making HTTP requests. It’s less verbose than curl.

Install wget (if not installed):

On Linux:
sudo apt install wget
On macOS:
brew install wget
Test the Function:

wget -qO- https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/
For POST Requests:

wget --method=POST --header="Content-Type: application/json" \
     --body-data='{"key": "value"}' \
     -qO- https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/echo
3. Using Google Cloud SDK (gcloud)
The gcloud CLI tool provides a simple way to test Google Cloud Functions.

Test the Function:

gcloud functions call flask_app --data='{"key": "value"}'
Replace flask_app with your function name.
Use the --data flag to send payload data.
Note:

This works only for Cloud Functions triggered by events (e.g., Pub/Sub). For HTTP-triggered functions, you can use curl or another HTTP client.

4. Using Node.js with Axios
If you’re comfortable with Node.js, you can use the axios library to make requests.

Create a Script (test-function.js):

const axios = require('axios');

axios.get('https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/')
  .then(response => {
    console.log(response.data);
  })
  .catch(error => {
    console.error(error.response ? error.response.data : error.message);
  });
Run the Script:

node test-function.js
5. Using Python with requests
Python’s requests library is a great alternative for testing HTTP endpoints.

Create a Script (test_function.py):

import requests

url = "https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/"
response = requests.get(url)
print(response.json())
Run the Script:

python test_function.py
For POST Requests:

import requests

url = "https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/echo"
data = {"key": "value"}
response = requests.post(url, json=data)
print(response.json())
6. Using Postman CLI (newman)
If you already use Postman, you can export a request and run it with the newman CLI.

Install newman:

npm install -g newman
Test the Function:

Export your Postman collection as a .json file.
Run the collection:
newman run your-collection.json
7. Using PowerShell (Windows)
For Windows users, PowerShell provides a built-in way to make HTTP requests using Invoke-RestMethod.

Test the Function:

Invoke-RestMethod -Uri "https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/"
For POST Requests:

Invoke-RestMethod -Uri "https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/echo" `
    -Method POST `
    -Body '{"key": "value"}' `
    -ContentType "application/json"
Summary
Each of these methods has its advantages. If you’re looking for simplicity:

Use httpie for a better experience than curl.
Use gcloud for native Google Cloud testing.
If you're scripting:

Use Python (requests) or Node.js (axios) for custom workflows.
Let me know if you'd like detailed help with any specific tool!








