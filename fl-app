from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/', methods=['GET'])
def home():
    return jsonify({"message": "Welcome to the Flask app on Google Cloud Functions!"})

@app.route('/echo', methods=['POST'])
def echo():
    data = request.get_json()
    return jsonify({"you_sent": data})

@app.route('/status', methods=['GET'])
def status():
    return jsonify({"status": "API is working!"})

# Entry point for Google Cloud Function
def flask_app(request):
    return app(request)

def flask_app(request):
    """
    Adapter for Google Cloud Function.
    Uses Flask's WSGI request/response handling to process the request.
    """
    with app.request_context(request.environ):
        response = app.full_dispatch_request()
        return response


2. Run the app:
functions-framework --target=flask_app --port=8080

3.
5. Test the Deployed API
Use curl to test the deployed API:

Test the Home API:
curl https://REGION-PROJECT_ID.cloudfunctions.net/flask_app
Test the Status API:
curl https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/status
Test the Echo API with POST data:
curl -X POST https://REGION-PROJECT_ID.cloudfunctions.net/flask_app/echo \
    -H "Content-Type: application/json" \
    -d '{"message": "Hello, Cloud Functions!"}'


Alternate Fix: Use werkzeug.serving.run_simple() (Optional for Local Testing)
If you’re testing locally without using functions-framework, ensure you’re running a WSGI-compatible server. Here’s how to adapt for testing locally:

if __name__ == "__main__":
    from werkzeug.serving import run_simple

    run_simple("localhost", 8080, app)

curl http://localhost:8080/
curl http://localhost:8080/status
curl -X POST http://localhost:8080/echo -H "Content-Type: application/json" -d '{"key": "value"}'




